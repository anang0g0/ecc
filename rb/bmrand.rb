#! /usr/local/bin/ruby
# /root/ruby-1.6.7/sample/bmrand.rb
# Created: Jan 28,2004
# Author: tcshacina
# $Id: bmrand.rb,v 0.1 2004/01/28
# usage: ruby bmramd.rb [file]
# hint: Discrete Logarithm Generator

def M32(x) (((1 << 32)-1)&(x)) end

@s_r=0
@s_s=0
@a_r=0
@a_s=0
@Pub_key=0


=begin
9223372036854785687,
9223372036854786263,
9227875636482157163,
13835058055282174583};
=end

@KEYDEF=@U[11]
 # SGP */
#@KEYDEF=97788888745463540643262548300201729806525391476402282848706169459770396492073602039095514523473374359988681947091292005523954797054767192116656100785666440095118928776457296943893523018715336260541244217091990481817677778985476605556762672349505655657810698817901064639971684815509507764394425018715419966376587
 #   @KEYDEF=97788888745463540643262548300201729806525391476402282848706169459770396492073602039095514523473374359988681947091292005523954797054767192116656100785666440095118928776457296943893523018715336260541244217091990481817677778985476605556762672349505655657810698817901064639971684815509507764394425018715419966382467
@KEYDEF2=0
@GROUP_GENERATOR=0
@K=0


# Default modulus value by zebedee
@DFLT_MODULUS=0xf488fd584e49dbcd20b49de49107366b336c380d451d0f7c88b31c7c5b2d8ef6f3c923c043f0a55b188d8ebb558cb85d38d334fd7c175743a31d186cde33212cb52aff3ce1b1294018118d7c84a70a72d686c40319c807297aca950cd9969fabd00a509b0246d3083d66a45d419f9c7cbd894b221926baaba25ec355e92f78c7


#jj=aa^bb mod oo
def exp(aa, bb, oo)

  ii=oo
  j=0
  jj=0
  kk=[2**12] #prime is 4096 bit table
  c=[2**13]  #mod is 8192 bit table
  count=0

  for i in 0..4096
    kk[i]=0
  end
  while(ii>0)
	ii = (ii>>1)
	j=j+1
  end


  kk[0]=aa
  cc=bb
#  print j,"\n"
  
#ex.1000=2**3+2**5+2**6+2**7+2**8+2**9 makes a array c=[3,5,6,7,8,9]
    for i in 0..j
      if ((cc^1)%2 == 0) # testbit(bb,i)
	c[count]=i
	count=count+1
      end
      cc=(cc>>1)
    end
#    print count,"\n"

    for i in 1..(c[count-1]+1)
      kk[i] = kk[i-1]*kk[i-1]%oo
    end

    jj=1
    for i in 0..count-1
      jj=kk[c[i]]*jj%oo
      if (jj==0)
#	print i,"\n"
      end
    end

    return jj
end


=begin
for i in 1..100
 print exp(3,i,@KEYDEF),"\n"
=end


def bmr(m)

  ii=m;

  for j in 0..1023
    ii=exp(257,ii,@KEYDEF)
   if(ii>@KEYDEF/2)
     print "1"
   end
   if(ii<@KEYDEF/2)
     print "0"
   end
  end
end

bmr(10)
print "\n"

